{
  
    
        "post0": {
            "title": "Jup Post",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# &quot;Title&quot; n”, “&gt; &quot;Interesting stuff&quot; n”, “- toc: true n”, “- branch: master n”, “- badges: true n”, “- comments: true n”, “- categories: [search, forecast] n”, “- search_exclude: true n”, “- metadata_key1: metadata_value1 n”, “- metadata_key2: metadata_value2” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: {}, “outputs”: [], “source”: [ “import pandas as pd n”, “#matplotlib inline” ] }, { “cell_type”: “code”, “execution_count”: 7, “metadata”: {}, “outputs”: [], “source”: [ “df = pd.DataFrame({‘Name’: [&quot;Andrew&quot;, &quot;Bob&quot;, &quot;Gilmor&quot;], n”, “ &quot;Age&quot;: [30, 40, 23]})” ] }, { “cell_type”: “code”, “execution_count”: 8, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;Name&lt;/th&gt; n”, “ &lt;th&gt;Age&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;0&lt;/th&gt; n”, “ &lt;td&gt;Andrew&lt;/td&gt; n”, “ &lt;td&gt;30&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;td&gt;Bob&lt;/td&gt; n”, “ &lt;td&gt;40&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;td&gt;Gilmor&lt;/td&gt; n”, “ &lt;td&gt;23&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ Name Age n”, “0 Andrew 30 n”, “1 Bob 40 n”, “2 Gilmor 23” ] }, “execution_count”: 8, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “df.head()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Wow that looks interesting” ] }, { “cell_type”: “code”, “execution_count”: 11, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f06bd428978&gt;” ] }, “execution_count”: 11, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “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 n”, “text/plain”: [ “&lt;Figure size 432x288 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “df[‘Age’].plot.bar()” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.6.9” } }, “nbformat”: 4, “nbformat_minor”: 4 } .",
            "url": "https://adiell.github.io/fptest/2020/03/20/jup-post.ipynb",
            "relUrl": "/2020/03/20/jup-post.ipynb",
            "date": " • Mar 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc: true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://adiell.github.io/fptest/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://adiell.github.io/fptest/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://adiell.github.io/fptest/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}