{
  
    
        "post0": {
            "title": "תמותה עודפת בישראל ב2020",
            "content": "כחלק מהדיון הציבורי על מגפת הקורונה (covid-19) ודרכי ההתמודדות עימה, עלתה הטענה כי מרבית הנפטרים הנכללים בסטטיסטיקת הנפטרים עקב המחלה אינם נפטרים &quot;מקורונה&quot; אלא &quot;עם קורונה&quot;. הם &quot;מתים מהלכים&quot; אשר היו מתים מסיבות אלו ואחרות גם ללא קשר להמצאות נגיף הקורונה בגופם. לטענה זו יש היבטים שונים, מוסריים (האם מותר לדרוס &quot;מתים מהלכים&quot;?), ביולוגיים/רפואיים, סטטיסטיים ועוד. . מטרת פוסט זה להתמקד באספקט צר (אך חשוב!) ולבחון האם קיימת תמותה עודפת בישראל בשנת 2020 ובפרט בחודשי הקיץ של שנה זו, כיוון שהמצאות תמותה עודפת עשויה להצביע על נפטרים &quot;מקורונה&quot; ולא &quot;עם קורונה&quot;. במספר מדינות בעולם הודגמה תמותה עודפת בשנת 2020 (לדוגמא כאן). בישראל הופיע באחרונה בכותרות דו&quot;ח של הלמ&quot;ס בו לא נמצאה עלייה משמעותית בתמותה. דו&quot;ח זה כולל נתונים אך ורק עד ליולי 2020. בחודש זה חלה אמנם עלייה משמעותית בתלואה ובסטטיסטקת הנפטרים &quot;עם קורונה&quot;, אך עלייה זו המשיכה והתגברה מאז ועד למועד כתיבת שורות אלו (20.9.2020),כך שיש עניין לבחון האם בנתונים החדשים ניתן לראות תמותה עודפת או לא? . לצערי, הנתונים העדכניים ביותר באתר הלמ&quot;ס מגיעים עד לאמצע אוגוסט, כך שהתוספת על דו&quot;ח הלמ&quot;ס הינה קטנה יחסית. בעתיד יהיה ניתן לעדכן את הניתוח עם נתונים חדשים. השתמשתי בקובץ &quot;פטירות של תושבי ישראל, לפי שבוע, מין, קבוצת אוכלוסייה וגיל, 2020&quot; שהורדתי מכאן. ניתן למצוא שם קבצים נוספים ברזולציות אחרות. . מן הראוי להעיר שבעוד ההתסכלות על נתוני תמותה עודפת היא חשובה ביותר, היא אינה חפה מבעיות. בפרט, היא חשופה לתנודות אחרות בתמותה, לדוגמא ירידה התמותה מתאונות דרכים כאן עמ&#39; 11-12, התאבדויות עקב בדידות ומצוקה כלכלית (לא ראיתי נתונים, אך כן נבואות זעם) ועוד. . EDA . import urllib import pandas as pd import seaborn as sns %matplotlib inline MORTALITY_FILE_URL = &#39;https://www.cbs.gov.il/he/publications/LochutTlushim/2020/%D7%A4%D7%98%D7%99%D7%A8%D7%95%D7%AA-2000-2020-%D7%9C%D7%A4%D7%99-%D7%A9%D7%91%D7%95%D7%A2.xlsx&#39; MORTALITY_FILE_LOCATION = &quot;/home/adiell/data/israel_moratality_stats.xslx&quot; . ## Run this to get the data from CBS website # urllib.request.urlretrieve(FILE_URL, MORTALITY_FILE_LOCATION) . AGE_GROUPS = [&quot;0-19&quot;, &quot;20-29&quot;, &quot;30-39&quot;, &quot;40-49&quot;, &quot;50-59&quot;, &quot;60-69&quot;, &quot;70-79&quot;,&quot;80+&quot;] COLUMNS_NAMES = [&quot;Week&quot;, &quot;Date&quot;, &quot;Total&quot;, &quot;Males&quot;, &quot;Females&quot;, &quot;Total - Jews&quot;, &quot;Males - Jews&quot;, &quot;Females - Jews&quot;, &quot;Total - Arabs&quot;, &quot;Males - Arabs&quot;, &quot;Females - Arabs&quot;, &quot;Total - 70+&quot;, &quot;Arabs - 70+&quot;, &quot;Jews - 70+&quot;, &quot;Males - 70+&quot;, &quot;Males - Arabs - 70+&quot;, &quot;Males - Jews - 70+&quot;, &quot;Females - 70+&quot;, &quot;Females - Arabs - 70+&quot;, &quot;Females - Jews - 70+&quot; ] + [&quot;Males - &quot; + age for age in AGE_GROUPS] + [&quot;Females - &quot; + age for age in AGE_GROUPS] . def read_sheet(year): df = pd.read_excel(MORTALITY_FILE_LOCATION, sheet_name = str(year), skiprows=12) df.columns = COLUMNS_NAMES df[&#39;year&#39;] = year df[&#39;month&#39;] = df[&#39;Date&#39;].apply(lambda x: x.month) return df . mortality_raw_data = pd.concat([read_sheet(year) for year in range(2000, 2021)]) mortality_raw_data = mortality_raw_data.dropna(subset=[&quot;Total&quot;]) ## Future dates have NA . נתמקד בנתוני התמותה הכוללת ולא במגזר או חתך ספציפי. יהיה מעניין לחזור על הניתוח עבור חתכים נוספים. אם נמצא משהו מעניין, זה יכול לעזור להעמקת השסעים בחברה הישראלית. . column_of_interest = &quot;Total&quot; . _ = mortality_raw_data.plot(&quot;Date&quot;, column_of_interest, figsize = (12,6)) . הנתונים בעלי עונתיות שנתית ומגמת גידול כללית. אפשר לנסות לתקנן את מגמת הגידול אם נחלק בגודל האוכלוסיה (לא אידיאלי כי מה שרלוונטי זו האוכלוסיה המבוגרת יותר, אבל זה מה שיש וקל לעשות :). זה גם מה שהלמ&quot;ס עושים כמדומני. בנוסף גם המידע ברזולוציה זמנית אחרת. מה לעשות). את נתוני גודל האוכלוסיה לקחתי מויקיפדיה (משום מה לא ראיתי נתונים דומים באתר הלמ&quot;ס). משום מה גם אין נתונים על גודל האוכלוסיה ב2017 אז השלמתי על ידי ממוצע גאומטרי של 2016,2018 . population = pd.DataFrame( { &#39;year&#39; : range(2000, 2021), &#39;population&#39;: [6369, 6508, 6631, 6748, 6869, 6991, 7116, 7244, 7337, 7552, 7695, 7837, 7984, 8134, 8297, 8463, 8628, (8628*8972)**0.5, 8972, 9021, 9190] } ) . mortality_raw_data = mortality_raw_data.merge(population) . normed_columns_of_interest = &#39;Norm. &#39; + column_of_interest . mortality_raw_data[normed_columns_of_interest] = mortality_raw_data[column_of_interest]/ mortality_raw_data[&#39;population&#39;] . _ = mortality_raw_data.plot(&quot;Date&quot;,normed_columns_of_interest , figsize = (12,6)) . נראה שיש מגמת ירידה בתמותה המנורמלת לפי שנים, אך היא נראית חלשה יותר מאשר המגמה בנתונים הגולמיים. . _ = mortality_raw_data.boxplot(column = normed_columns_of_interest, by=&#39;month&#39;, figsize = (12,6)) . יש עונתיות שנתית ברורה בתמותה. כמו כן, יש תנודתיות רבה בין השנים. התנודתיות גדולה יותר בחורף. רואים את זה גם בנתונים הגולמיים וגם ובמתוקננים. . &#1502;&#1493;&#1491;&#1500; &#1500;&#1502;&quot;&#1505; . נתחיל מניתוח דמוי למ&quot;ס. נשווה את התחלואה בפועל (פר שבוע) לממוצע של חמש השנים האחרונות. ליתר דיוק ניקח ממוצע של הנתונים המתוקננים ונכפיל באוכלוסיה העכשווית. כמו כן, עקב רעש די גדול ניקח ממוצע נע של 3 שבועות על ה&quot;מודל&quot;. נחשב גבולות בטחון על פי סטיית תקן * 1.96 (z-score מתאים לרווח סמך של 95%) . class CBSModel(): def __init__(self, metric, norm_factor = population[&#39;population&#39;].values[-1]): self._metric = metric self._norm_factor = norm_factor def fit(self, df): mean = self._norm_factor * df .query(&#39;2015 &lt;= year &lt;= 2019&#39;) .groupby(&#39;Week&#39;)[self._metric].mean() mean = mean.rolling(3, center=True, min_periods=1).mean() std = self._norm_factor * df .query(&#39;2015 &lt;= year &lt;= 2019&#39;) .groupby(&#39;Week&#39;)[self._metric].std() std = std.rolling(3, center=True, min_periods=1).mean() self._model = pd.concat([mean, std], axis = 1) self._model.columns = [&#39;mean&#39;, &#39;std&#39;] def predict(self, df, conf_level = 1.96): return df.merge(self._model, left_on=&#39;Week&#39;, right_index=True). assign( actual_mortality = lambda x: x[self._metric] * self._norm_factor, predicted_mortality = lambda x: x[&#39;mean&#39;], upper_bound = lambda x: x[&#39;mean&#39;] + (conf_level * x[&#39;std&#39;]), lower_bound = lambda x: x[&#39;mean&#39;] - (conf_level * x[&#39;std&#39;]), )[[&#39;Date&#39;, &#39;year&#39;, &#39;Week&#39;, &#39;month&#39;, &#39;actual_mortality&#39;, &#39;predicted_mortality&#39; ,&#39;lower_bound&#39;, &#39;upper_bound&#39;]] . cbs_model = CBSModel(normed_columns_of_interest) pre_covid_data = mortality_raw_data.query(&#39;Date &lt;= &quot;2020-03-01&quot;&#39;) cbs_model.fit(pre_covid_data) cbs_result = cbs_model.predict(mortality_raw_data.query(&#39;Date &gt;= &quot;2020-01-01&quot;&#39;)) . def plot_mortality_predition(result): fig = plt.figure(figsize = (12,6)) plt.plot(result[&#39;Date&#39;], result[&#39;actual_mortality&#39;],&#39;r&#39;, label = &#39;Actual mortality&#39;) plt.plot(result[&#39;Date&#39;], result[&#39;predicted_mortality&#39;],&#39;b&#39;, label = &#39;Predicted mortality&#39;) plt.plot(result[&#39;Date&#39;], result[&#39;upper_bound&#39;],&#39;b--&#39;) plt.plot(result[&#39;Date&#39;], result[&#39;lower_bound&#39;],&#39;b--&#39;) _=plt.legend() plot_mortality_predition(cbs_result) . בחודשי החורף (ינואר ופברואר) תמותה בחסר, כפי שצויין גם בדו&quot;ח הלמ&quot;ס, כנראה עקב שפעת יחסית קלה השנה. ניתן לראות שהחל מתחילת יולי התחלואה מעל למצופה בכל השבועות. אולם רק בשבועיים העלייה היא מעל לגבול העליון של ה-95%. אחד מהם כבר היה בדו&quot;ח הלמ&quot;ס המקורי ואחד &quot;חדש&quot; מאוגוסט. נסתכל גם על ממוצע נע של התמותה בפועל להחלקת רעשים: . mortality_raw_data[&#39;Mortality. mavg&#39;] = mortality_raw_data[normed_columns_of_interest] .rolling(3, center=True, min_periods=1).mean() cbs_model2 = CBSModel(&#39;Mortality. mavg&#39;) pre_covid_data = mortality_raw_data.query(&#39;Date &lt;= &quot;2020-03-01&quot;&#39;) cbs_model2.fit(pre_covid_data) cbs_result2 = cbs_model2.predict(mortality_raw_data.query(&#39;year == 2020&#39;)) plot_mortality_predition(cbs_result2) . כאן ניתן לראות שאנחנו כבר כמה שבועות טובים רצופים מעל הגבול העליון. מהי ההערכה לתמותה עודפת מצטברת? נסתכל לפי חודשים: . cbs_result.assign( excess_mortality = lambda x: x.actual_mortality - x.predicted_mortality ).groupby(&#39;month&#39;)[&#39;excess_mortality&#39;].sum().to_frame() . excess_mortality . month . 1 -274.799115 | . 2 -369.688408 | . 3 100.541240 | . 4 32.815022 | . 5 146.766899 | . 6 -71.662591 | . 7 174.894336 | . 8 166.480374 | . אם כן, אנו רואים תמותה כי בחודש יולי יש תמותה עודפת של כ-175 מתים. גם באוגוסט יש תמותה עודפת לא מובוטלת. אם ניקח בחשבון כי נתוני אוגוסט הם חלקיים (3 שבועות?), אזי במונחים חודשיים מדובר בכ-250 מתים עודפים וסה&quot;כ בכ-425 בחודשי הקיץ יולי אוגוסט. . אז מה הלאה? חישוב ממוצעים וסטיית תקן זה טוב ויפה אבל זה סה&quot;כ סטטיסיטיקה. כData scientists שמכבדים את עצמם לא צריך להשתמש במודל Machine Learning יותר רציני. וכאומרים Machine learning כמובן שמדובר על Deep learning אך כיוון שקצרה היריעה, נתחיל מלנסות prophet כמודל time series לחזות התמותה במקום ממוצע. . Draft - please ignore for now . from fbprophet import Prophet . prophet_df = mortality_raw_data[[&quot;Date&quot;,&quot;Total&quot;]].copy().rename(columns = {&#39;Date&#39;:&#39;ds&#39;, &quot;Total&quot;:&quot;y&quot;}) # prophet_df[&#39;y&#39;] = prophet_df[&#39;y&#39;].rolling(4).mean() . prophet_df . ds y . 0 2000-01-03 | 964.0 | . 1 2000-01-10 | 942.0 | . 2 2000-01-17 | 1047.0 | . 3 2000-01-24 | 952.0 | . 4 2000-01-31 | 968.0 | . ... ... | ... | . 29 2020-07-20 | 810.0 | . 30 2020-07-27 | 929.0 | . 31 2020-08-03 | 839.0 | . 32 2020-08-10 | 925.0 | . 33 2020-08-17 | 834.0 | . 1077 rows × 2 columns . pre_corona_data = prophet_df.query(&#39;ds &lt; &quot;2020-03-01&quot;&#39;) . prophet = Prophet() . prophet.fit(pre_corona_data) . INFO:fbprophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this. . &lt;fbprophet.forecaster.Prophet at 0x7f2f0a071e50&gt; . forecast = prophet.predict(prophet_df) . forecast = forecast.merge(prophet_df) . import matplotlib.pyplot as plt %matplotlib inline . forecast . ds trend yhat_lower yhat_upper trend_lower trend_upper additive_terms additive_terms_lower additive_terms_upper weekly weekly_lower weekly_upper yearly yearly_lower yearly_upper multiplicative_terms multiplicative_terms_lower multiplicative_terms_upper yhat y . 0 2000-01-03 | 847.528311 | 807.422994 | 924.467455 | 847.528311 | 847.528311 | 17.661572 | 17.661572 | 17.661572 | -131.965957 | -131.965957 | -131.965957 | 149.627528 | 149.627528 | 149.627528 | 0.0 | 0.0 | 0.0 | 865.189882 | 964.0 | . 1 2000-01-10 | 847.612184 | 822.044334 | 933.360090 | 847.612184 | 847.612184 | 32.617431 | 32.617431 | 32.617431 | -131.965957 | -131.965957 | -131.965957 | 164.583388 | 164.583388 | 164.583388 | 0.0 | 0.0 | 0.0 | 880.229615 | 942.0 | . 2 2000-01-17 | 847.696057 | 823.020075 | 937.018388 | 847.696057 | 847.696057 | 33.928580 | 33.928580 | 33.928580 | -131.965957 | -131.965957 | -131.965957 | 165.894537 | 165.894537 | 165.894537 | 0.0 | 0.0 | 0.0 | 881.624637 | 1047.0 | . 3 2000-01-24 | 847.779930 | 816.960224 | 933.633951 | 847.779930 | 847.779930 | 28.118256 | 28.118256 | 28.118256 | -131.965957 | -131.965957 | -131.965957 | 160.084213 | 160.084213 | 160.084213 | 0.0 | 0.0 | 0.0 | 875.898187 | 952.0 | . 4 2000-01-31 | 847.863803 | 810.301012 | 922.971374 | 847.863803 | 847.863803 | 20.956213 | 20.956213 | 20.956213 | -131.965957 | -131.965957 | -131.965957 | 152.922170 | 152.922170 | 152.922170 | 0.0 | 0.0 | 0.0 | 868.820017 | 968.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1072 2020-07-20 | 1015.926867 | 753.029402 | 862.306552 | 1015.856991 | 1015.992782 | -209.155503 | -209.155503 | -209.155503 | -131.965957 | -131.965957 | -131.965957 | -77.189546 | -77.189546 | -77.189546 | 0.0 | 0.0 | 0.0 | 806.771365 | 810.0 | . 1073 2020-07-27 | 1016.123047 | 754.953981 | 872.370857 | 1016.043119 | 1016.196960 | -201.357391 | -201.357391 | -201.357391 | -131.965957 | -131.965957 | -131.965957 | -69.391434 | -69.391434 | -69.391434 | 0.0 | 0.0 | 0.0 | 814.765656 | 929.0 | . 1074 2020-08-03 | 1016.319227 | 770.613995 | 877.702806 | 1016.229824 | 1016.400811 | -195.329539 | -195.329539 | -195.329539 | -131.965957 | -131.965957 | -131.965957 | -63.363582 | -63.363582 | -63.363582 | 0.0 | 0.0 | 0.0 | 820.989688 | 839.0 | . 1075 2020-08-10 | 1016.515407 | 762.023986 | 879.518057 | 1016.413956 | 1016.612114 | -195.421532 | -195.421532 | -195.421532 | -131.965957 | -131.965957 | -131.965957 | -63.455575 | -63.455575 | -63.455575 | 0.0 | 0.0 | 0.0 | 821.093875 | 925.0 | . 1076 2020-08-17 | 1016.711587 | 758.942829 | 871.884295 | 1016.600757 | 1016.815579 | -200.992377 | -200.992377 | -200.992377 | -131.965957 | -131.965957 | -131.965957 | -69.026420 | -69.026420 | -69.026420 | 0.0 | 0.0 | 0.0 | 815.719210 | 834.0 | . 1077 rows × 20 columns . forecast.query(&#39;ds&gt;&quot;2018-01-01&quot;&#39;)[[&#39;y&#39;, &#39;yhat&#39;, &#39;yhat_upper&#39;, &#39;yhat_lower&#39;]].plot(figsize=(12,6)) . &lt;AxesSubplot:&gt; . prophet.plot(forecast) . from fbprophet.plot import plot_plotly, plot_components_plotly . plot_plotly(prophet, forecast) . plot_components_plotly(prophet, forecast) . forecast[&#39;year&#39;] = forecast[&#39;ds&#39;].apply(lambda x: x.year) forecast[&#39;month&#39;] = forecast[&#39;ds&#39;].apply(lambda x: x.month) . SEASONS = {1: &#39;Winter&#39;, 2: &#39;Winter&#39;, 3: &#39;Winter&#39;, 4: &#39;Spring&#39;, 5: &#39;Spring&#39;, 6: &#39;Spring&#39;, 7: &#39;Summer&#39;, 8: &#39;Summer&#39;, 9: &#39;Summer&#39;, 10: &#39;Autumn&#39;, 11: &#39;Autumn&#39;, 12: &#39;Autumn&#39; } . forecast[&#39;season&#39;] = forecast[&#39;month&#39;].apply(SEASONS.get) . df = forecast.query(&#39;year&gt;-2017&#39;).groupby([&#39;year&#39;,&#39;month&#39;])[&#39;y&#39;,&#39;yhat&#39;].mean() . /home/adiell/Documents/py/venv/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead. . df[&#39;change&#39;] = df[&#39;y&#39;]/df[&#39;yhat&#39;] . df . y yhat change . year month . 2000 1 974.60 | 874.352468 | 1.114653 | . 2 808.75 | 837.301378 | 0.965901 | . 3 757.25 | 769.899297 | 0.983570 | . 4 687.25 | 709.436892 | 0.968726 | . 5 650.00 | 662.425648 | 0.981242 | . ... ... ... | ... | ... | . 2020 4 882.50 | 868.686762 | 1.015901 | . 5 874.50 | 827.844090 | 1.056358 | . 6 786.00 | 802.848899 | 0.979014 | . 7 850.75 | 806.117293 | 1.055368 | . 8 866.00 | 819.267591 | 1.057042 | . 248 rows × 3 columns .",
            "url": "https://adiell.github.io/fptest/2020/09/09/Israel_excess_mortality.html",
            "relUrl": "/2020/09/09/Israel_excess_mortality.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://adiell.github.io/fptest/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://adiell.github.io/fptest/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://adiell.github.io/fptest/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}