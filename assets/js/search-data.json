{
  
    
        "post0": {
            "title": "תמותה עודפת בישראל ב2020",
            "content": "כחלק מהדיון הציבורי על מגפת הקורונה ודרכי ההתמודדות עימה, עלתה הטענה כי מרבית הנפטרים הנכללים בסטטיסטיקת הנפטרים עקב המחלה אינם נפטרים &quot;מקורונה&quot; אלא &quot;עם קורונה&quot;. הם &quot;מתים מהלכים&quot; אשר היו מתים מסיבות אלו ואחרות גם ללא קשר להמצאות נגיף הקורונה בגופם. לטענה זו יש היבטים שונים, מוסריים (האם מותר לדרוס &quot;מתים מהלכים&quot;?), ביולוגיים/רפואיים, סטטיסטיים ועוד. . מטרת פוסט זה להתמקד באספקט צר (אך חשוב!) ולבחון האם קיימת תמותה עודפת בישראל בשנת 2020 ובפרט בחודשי הקיץ של שנה זו, כיוון שהמצאות תמותה עודפת עשויה להצביע על נפטרים &quot;מקורונה&quot; ולא &quot;עם קורונה&quot;. במספר מדינות בעולם הודגמה תמותה עודפת בשנת 2020 (לדוגמא כאן). בישראל הופיע באחרונה בכותרות דו&quot;ח של הלמ&quot;ס בו לא נמצאה עלייה משמעותית בתמותה. דו&quot;ח זה כולל נתונים אך ורק עד ליולי 2020. בחודש זה חלה אמנם עלייה משמעותית בתלואה ובסטטיסטקת הנפטרים &quot;עם קורונה&quot;, אך עלייה זו המשיכה והתגברה מאז ועד למועד כתיבת שורות אלו (20.9.2020),כך שיש עניין לבחון האם בנתונים החדשים ניתן לראות תמותה עודפת או לא? . לצערי, הנתונים העדכניים ביותר באתר הלמ&quot;ס מגיעים עד לאמצע אוגוסט, כך שהתוספת על דו&quot;ח הלמ&quot;ס הינה קטנה יחסית. בעתיד יהיה ניתן לעדכן את הניתוח עם נתונים חדשים. השתמשתי בקובץ &quot;פטירות של תושבי ישראל, לפי שבוע, מין, קבוצת אוכלוסייה וגיל, 2020&quot; שהורדתי מכאן. ניתן למצוא שם קבצים נוספים ברזולציות אחרות. . מן הראוי להעיר שבעוד ההתסכלות על נתוני תמותה עודפת היא חשובה ביותר, היא אינה חפה מבעיות. בפרט, היא חשופה לתנודות אחרות בתמותה, לדוגמא ירידה התמותה מתאונות דרכים כאן עמ&#39; 11-12, התאבדויות עקב בדידות ומצוקה כלכלית (לא ראיתי נתונים, אך כן נבואות זעם) ועוד. . EDA . #collapse import urllib import pandas as pd import seaborn as sns import matplotlib.pyplot as plt %matplotlib inline MORTALITY_FILE_URL = &#39;https://www.cbs.gov.il/he/publications/LochutTlushim/2020/%D7%A4%D7%98%D7%99%D7%A8%D7%95%D7%AA-2000-2020-%D7%9C%D7%A4%D7%99-%D7%A9%D7%91%D7%95%D7%A2.xlsx&#39; MORTALITY_FILE_LOCATION = &quot;/home/adiell/data/israel_moratality_stats.xslx&quot; . . #collapse ## Run this to get the data from CBS website # urllib.request.urlretrieve(FILE_URL, MORTALITY_FILE_LOCATION) . . #collapse AGE_GROUPS = [&quot;0-19&quot;, &quot;20-29&quot;, &quot;30-39&quot;, &quot;40-49&quot;, &quot;50-59&quot;, &quot;60-69&quot;, &quot;70-79&quot;,&quot;80+&quot;] COLUMNS_NAMES = [&quot;Week&quot;, &quot;Date&quot;, &quot;Total&quot;, &quot;Males&quot;, &quot;Females&quot;, &quot;Total - Jews&quot;, &quot;Males - Jews&quot;, &quot;Females - Jews&quot;, &quot;Total - Arabs&quot;, &quot;Males - Arabs&quot;, &quot;Females - Arabs&quot;, &quot;Total - 70+&quot;, &quot;Arabs - 70+&quot;, &quot;Jews - 70+&quot;, &quot;Males - 70+&quot;, &quot;Males - Arabs - 70+&quot;, &quot;Males - Jews - 70+&quot;, &quot;Females - 70+&quot;, &quot;Females - Arabs - 70+&quot;, &quot;Females - Jews - 70+&quot; ] + [&quot;Males - &quot; + age for age in AGE_GROUPS] + [&quot;Females - &quot; + age for age in AGE_GROUPS] . . #collapse def read_sheet(year): df = pd.read_excel(MORTALITY_FILE_LOCATION, sheet_name = str(year), skiprows=12) df.columns = COLUMNS_NAMES df[&#39;year&#39;] = year df[&#39;month&#39;] = df[&#39;Date&#39;].apply(lambda x: x.month) return df . . #collapse mortality_raw_data = pd.concat([read_sheet(year) for year in range(2000, 2021)]) mortality_raw_data = mortality_raw_data.dropna(subset=[&quot;Total&quot;]) ## Future dates have NA . . נתמקד בנתוני התמותה הכוללת ולא במגזר או חתך ספציפי. יהיה מעניין לחזור על הניתוח עבור חתכים נוספים. אם נמצא משהו מעניין, זה יכול לעזור להעמקת השסעים בחברה הישראלית. . #collapse column_of_interest = &quot;Total&quot; _ = mortality_raw_data.plot(&quot;Date&quot;, column_of_interest, figsize = (12,6)) . . הנתונים בעלי עונתיות שנתית ומגמת גידול כללית. אפשר לנסות לתקנן את מגמת הגידול אם נחלק בגודל האוכלוסיה (לא אידיאלי כי מה שרלוונטי זו האוכלוסיה המבוגרת יותר, אבל זה מה שיש וקל לעשות :). זה גם מה שהלמ&quot;ס עושים כמדומני. בנוסף גם המידע ברזולוציה זמנית אחרת. מה לעשות). את נתוני גודל האוכלוסיה לקחתי מויקיפדיה (משום מה לא ראיתי נתונים דומים באתר הלמ&quot;ס). משום מה גם אין נתונים על גודל האוכלוסיה ב2017 אז השלמתי על ידי ממוצע גאומטרי של 2016,2018 . #collapse population = pd.DataFrame( { &#39;year&#39; : range(2000, 2021), &#39;population&#39;: [6369, 6508, 6631, 6748, 6869, 6991, 7116, 7244, 7337, 7552, 7695, 7837, 7984, 8134, 8297, 8463, 8628, (8628*8972)**0.5, 8972, 9021, 9190] } ) population . . year population . 0 2000 | 6369.00000 | . 1 2001 | 6508.00000 | . 2 2002 | 6631.00000 | . 3 2003 | 6748.00000 | . 4 2004 | 6869.00000 | . 5 2005 | 6991.00000 | . 6 2006 | 7116.00000 | . 7 2007 | 7244.00000 | . 8 2008 | 7337.00000 | . 9 2009 | 7552.00000 | . 10 2010 | 7695.00000 | . 11 2011 | 7837.00000 | . 12 2012 | 7984.00000 | . 13 2013 | 8134.00000 | . 14 2014 | 8297.00000 | . 15 2015 | 8463.00000 | . 16 2016 | 8628.00000 | . 17 2017 | 8798.31893 | . 18 2018 | 8972.00000 | . 19 2019 | 9021.00000 | . 20 2020 | 9190.00000 | . #collapse mortality_raw_data = mortality_raw_data.merge(population) normed_columns_of_interest = &#39;Norm. &#39; + column_of_interest mortality_raw_data[normed_columns_of_interest] = mortality_raw_data[column_of_interest]/ mortality_raw_data[&#39;population&#39;] . . #collapse _ = mortality_raw_data.plot(&quot;Date&quot;,normed_columns_of_interest , figsize = (12,6)) . . נראה שיש מגמת ירידה בתמותה המנורמלת לפי שנים, אך היא נראית חלשה יותר מאשר המגמה בנתונים הגולמיים. . #collapse _ = mortality_raw_data.boxplot(column = normed_columns_of_interest, by=&#39;month&#39;, figsize = (12,6)) . . יש עונתיות שנתית ברורה בתמותה. כמו כן, יש תנודתיות רבה בין השנים. התנודתיות גדולה יותר בחורף. רואים את זה גם בנתונים הגולמיים וגם ובמתוקננים. . &#1502;&#1493;&#1491;&#1500; &#1500;&#1502;&quot;&#1505; . נתחיל מניתוח דמוי למ&quot;ס. נשווה את התחלואה בפועל (פר שבוע) לממוצע של חמש השנים האחרונות. ליתר דיוק ניקח ממוצע של הנתונים המתוקננים ונכפיל באוכלוסיה העכשווית. כמו כן, עקב רעש די גדול ניקח ממוצע נע של 3 שבועות על ה&quot;מודל&quot;. נחשב גבולות בטחון על פי סטיית תקן * 1.96 (z-score מתאים לרווח סמך של 95%) . #collapse class CBSModel(): def __init__(self, metric, norm_factor = population[&#39;population&#39;].values[-1]): self._metric = metric self._norm_factor = norm_factor def fit(self, df): mean = self._norm_factor * df .query(&#39;2015 &lt;= year &lt;= 2019&#39;) .groupby(&#39;Week&#39;)[self._metric].mean() mean = mean.rolling(3, center=True, min_periods=1).mean() std = self._norm_factor * df .query(&#39;2015 &lt;= year &lt;= 2019&#39;) .groupby(&#39;Week&#39;)[self._metric].std() std = std.rolling(3, center=True, min_periods=1).mean() self._model = pd.concat([mean, std], axis = 1) self._model.columns = [&#39;mean&#39;, &#39;std&#39;] def predict(self, df, conf_level = 1.96): return df.merge(self._model, left_on=&#39;Week&#39;, right_index=True). assign( actual_mortality = lambda x: x[self._metric] * self._norm_factor, predicted_mortality = lambda x: x[&#39;mean&#39;], upper_bound = lambda x: x[&#39;mean&#39;] + (conf_level * x[&#39;std&#39;]), lower_bound = lambda x: x[&#39;mean&#39;] - (conf_level * x[&#39;std&#39;]), )[[&#39;Date&#39;, &#39;year&#39;, &#39;Week&#39;, &#39;month&#39;, &#39;actual_mortality&#39;, &#39;predicted_mortality&#39; ,&#39;lower_bound&#39;, &#39;upper_bound&#39;]] . . #collapse cbs_model = CBSModel(normed_columns_of_interest) pre_covid_data = mortality_raw_data.query(&#39;Date &lt;= &quot;2020-03-01&quot;&#39;) cbs_model.fit(pre_covid_data) cbs_result = cbs_model.predict(mortality_raw_data.query(&#39;Date &gt;= &quot;2020-01-01&quot;&#39;)) . . #collapse def plot_mortality_predition(result): fig = plt.figure(figsize = (12,6)) plt.plot(result[&#39;Date&#39;], result[&#39;actual_mortality&#39;],&#39;r&#39;, label = &#39;Actual mortality&#39;) plt.plot(result[&#39;Date&#39;], result[&#39;predicted_mortality&#39;],&#39;b&#39;, label = &#39;Predicted mortality&#39;) plt.plot(result[&#39;Date&#39;], result[&#39;upper_bound&#39;],&#39;b--&#39;) plt.plot(result[&#39;Date&#39;], result[&#39;lower_bound&#39;],&#39;b--&#39;) _=plt.legend() . . #collapse plot_mortality_predition(cbs_result) . . בחודשי החורף (ינואר ופברואר) תמותה בחסר, כפי שצויין גם בדו&quot;ח הלמ&quot;ס, כנראה עקב שפעת יחסית קלה השנה. ניתן לראות שהחל מתחילת יולי התחלואה מעל למצופה בכל השבועות. אולם רק בשבועיים העלייה היא מעל לגבול העליון של ה-95%. אחד מהם כבר היה בדו&quot;ח הלמ&quot;ס המקורי ואחד &quot;חדש&quot; מאוגוסט. נסתכל גם על ממוצע נע של התמותה בפועל להחלקת רעשים: . #collapse mortality_raw_data[&#39;Mortality. mavg&#39;] = mortality_raw_data[normed_columns_of_interest] .rolling(3, center=True, min_periods=1).mean() cbs_model2 = CBSModel(&#39;Mortality. mavg&#39;) pre_covid_data = mortality_raw_data.query(&#39;Date &lt;= &quot;2020-03-01&quot;&#39;) cbs_model2.fit(pre_covid_data) cbs_result2 = cbs_model2.predict(mortality_raw_data.query(&#39;year == 2020&#39;)) plot_mortality_predition(cbs_result2) . . כאן ניתן לראות שאנחנו כבר כמה שבועות טובים רצופים מעל הגבול העליון. מהי ההערכה לתמותה עודפת מצטברת? נסתכל לפי חודשים: . #collapse cbs_result.assign( excess_mortality = lambda x: x.actual_mortality - x.predicted_mortality, excess_mortality_percent = lambda x: (x.actual_mortality - x.predicted_mortality)/x.predicted_mortality ).groupby(&#39;month&#39;) .agg({&#39;excess_mortality&#39;: &#39;sum&#39;, &#39;excess_mortality_percent&#39;: &#39;mean&#39;}) . . excess_mortality excess_mortality_percent . month . 1 -274.799115 | -0.062750 | . 2 -369.688408 | -0.088203 | . 3 100.541240 | 0.023214 | . 4 32.815022 | 0.009317 | . 5 146.766899 | 0.043999 | . 6 -71.662591 | -0.017923 | . 7 174.894336 | 0.053895 | . 8 166.480374 | 0.068382 | . אם כן, אנו רואים תמותה כי בחודש יולי יש תמותה עודפת של כ-175 מתים. גם באוגוסט יש תמותה עודפת לא מובוטלת. אם ניקח בחשבון כי נתוני אוגוסט הם חלקיים (3 שבועות?), אזי במונחים חודשיים מדובר בכ-250 מתים עודפים וסה&quot;כ בכ-425 בחודשי הקיץ יולי אוגוסט. באחוזים מדובר בקרוב ל7% על חודש אוגוסט. אם נמשיך בקצב זה (שעשוי אף לעשות לצערנו) על תמותה שנתית של כ-45000 נגיע לתמותה עודפת של כ3100 איש. . אז מה הלאה? חישוב ממוצעים וסטיית תקן זה טוב ויפה אבל זה סה&quot;כ סטטיסיטיקה. כData scientists שמכבדים את עצמם לא צריך להשתמש במודל Machine Learning יותר רציני. וכאומרים Machine learning כמובן שמדובר על Deep learning אך כיוון שקצרה היריעה, נתחיל מלנסות prophet כמודל time series לחזות התמותה במקום ממוצע. אבל דבר ראשון נפסיק עם העברית שלא מרונדרת טוב ונתחיל לכתוב באנגלית. . Prophet - TBC .",
            "url": "https://adiell.github.io/blog/2020/09/20/Israel_excess_mortality.html",
            "relUrl": "/2020/09/20/Israel_excess_mortality.html",
            "date": " • Sep 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://adiell.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}